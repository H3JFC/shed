// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: secrets.sql

package db

import (
	"context"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (key, value)
VALUES (?, ?)
RETURNING id, "key", value, created_at, updated_at
`

type CreateSecretParams struct {
	Key   string
	Value string
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, createSecret, arg.Key, arg.Value)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSecretByID = `-- name: DeleteSecretByID :exec
DELETE FROM secrets
WHERE id = ?
`

func (q *Queries) DeleteSecretByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSecretByID, id)
	return err
}

const deleteSecretByKey = `-- name: DeleteSecretByKey :exec
DELETE FROM secrets
WHERE key = ?
`

func (q *Queries) DeleteSecretByKey(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteSecretByKey, key)
	return err
}

const getSecretByID = `-- name: GetSecretByID :one
SELECT id, "key", value, created_at, updated_at FROM secrets
WHERE id = ?
`

func (q *Queries) GetSecretByID(ctx context.Context, id int64) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecretByID, id)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSecretByKey = `-- name: GetSecretByKey :one
SELECT id, "key", value, created_at, updated_at FROM secrets
WHERE key = ?
`

func (q *Queries) GetSecretByKey(ctx context.Context, key string) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecretByKey, key)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSecrets = `-- name: ListSecrets :many
SELECT id, "key", value, created_at, updated_at FROM secrets
ORDER BY created_at DESC
`

func (q *Queries) ListSecrets(ctx context.Context) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, listSecrets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecret = `-- name: UpdateSecret :one
UPDATE secrets
SET key = ?, value = ?
WHERE id = ?
RETURNING id, "key", value, created_at, updated_at
`

type UpdateSecretParams struct {
	Key   string
	Value string
	ID    int64
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, updateSecret, arg.Key, arg.Value, arg.ID)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSecretByKey = `-- name: UpdateSecretByKey :one
UPDATE secrets
SET value = ?
WHERE key = ?
RETURNING id, "key", value, created_at, updated_at
`

type UpdateSecretByKeyParams struct {
	Value string
	Key   string
}

func (q *Queries) UpdateSecretByKey(ctx context.Context, arg UpdateSecretByKeyParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, updateSecretByKey, arg.Value, arg.Key)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
