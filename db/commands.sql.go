// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: commands.sql

package db

import (
	"context"
)

const createCommand = `-- name: CreateCommand :one
INSERT INTO commands (name, command)
VALUES (?, ?)
RETURNING id, name, command, created_at, updated_at
`

type CreateCommandParams struct {
	Name    string
	Command string
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, createCommand, arg.Name, arg.Command)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCommandByCommand = `-- name: DeleteCommandByCommand :exec
DELETE FROM commands
WHERE command = ?
`

func (q *Queries) DeleteCommandByCommand(ctx context.Context, command string) error {
	_, err := q.db.ExecContext(ctx, deleteCommandByCommand, command)
	return err
}

const deleteCommandByID = `-- name: DeleteCommandByID :exec
DELETE FROM commands
WHERE id = ?
`

func (q *Queries) DeleteCommandByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommandByID, id)
	return err
}

const deleteCommandByName = `-- name: DeleteCommandByName :exec
DELETE FROM commands
WHERE name = ?
`

func (q *Queries) DeleteCommandByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCommandByName, name)
	return err
}

const getCommandByCommand = `-- name: GetCommandByCommand :one
SELECT id, name, command, created_at, updated_at FROM commands
WHERE command = ?
`

func (q *Queries) GetCommandByCommand(ctx context.Context, command string) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommandByCommand, command)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommandByID = `-- name: GetCommandByID :one
SELECT id, name, command, created_at, updated_at FROM commands
WHERE id = ?
`

func (q *Queries) GetCommandByID(ctx context.Context, id int64) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommandByID, id)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommandByName = `-- name: GetCommandByName :one
SELECT id, name, command, created_at, updated_at FROM commands
WHERE name = ?
`

func (q *Queries) GetCommandByName(ctx context.Context, name string) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommandByName, name)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCommands = `-- name: ListCommands :many
SELECT id, name, command, created_at, updated_at FROM commands
ORDER BY created_at DESC
`

func (q *Queries) ListCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, listCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Command,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommand = `-- name: UpdateCommand :one
UPDATE commands
SET name = ?, command = ?
WHERE id = ?
RETURNING id, name, command, created_at, updated_at
`

type UpdateCommandParams struct {
	Name    string
	Command string
	ID      int64
}

func (q *Queries) UpdateCommand(ctx context.Context, arg UpdateCommandParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, updateCommand, arg.Name, arg.Command, arg.ID)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCommandByName = `-- name: UpdateCommandByName :one
UPDATE commands
SET command = ?
WHERE name = ?
RETURNING id, name, command, created_at, updated_at
`

type UpdateCommandByNameParams struct {
	Command string
	Name    string
}

func (q *Queries) UpdateCommandByName(ctx context.Context, arg UpdateCommandByNameParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, updateCommandByName, arg.Command, arg.Name)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
